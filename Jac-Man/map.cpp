#include "map.h"
#include <algorithm>

Map::Map() {
	int tempMap[ROWS][COLS] = {
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
        {1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,1,1},
        {1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1},
        {1,1,2,1,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,1},
        {1,1,2,1,1,1,1,1,1,1,1,0,1,1,1,2,1,0,1,1,1,1,1,1,1,1,0,1,2,1,0,1,1,1,1,1,1,1,1,1,1,2,1,2,1,1},
        {1,1,2,2,2,2,2,2,2,2,1,1,1,2,2,2,1,0,1,1,1,0,0,0,1,1,0,1,2,1,0,1,3,2,2,2,2,2,2,2,2,2,2,2,1,1},
        {1,1,1,1,1,1,2,1,1,2,2,2,2,2,1,2,1,0,0,0,0,0,0,0,0,0,0,1,2,1,0,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1},
        {1,1,1,1,1,1,2,2,2,3,1,1,1,2,1,2,1,0,0,0,1,1,0,1,1,0,0,1,2,1,0,0,0,0,0,0,0,0,1,2,1,1,1,1,1,1},
        {1,1,1,1,1,1,2,1,1,1,1,0,1,2,1,2,1,0,0,0,1,0,0,0,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1},
        {0,4,0,0,0,0,2,1,0,0,0,0,1,2,1,2,1,0,0,0,1,0,1,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,4,0},
        {1,1,1,1,1,1,2,1,1,1,1,1,1,2,1,2,1,1,1,1,1,0,1,0,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,2,1,1,1,1,1,1},
        {1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,0,0,0,0,1,2,1,0,1,2,1,1,1,1,1,1},
        {1,1,1,1,1,1,2,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,0,0,0,0,0,1,2,1,0,1,2,1,1,1,1,1,1},
        {1,1,2,2,2,2,2,2,2,2,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,1,2,1,0,1,2,2,2,2,2,1,1},
        {1,1,3,1,1,1,1,2,1,1,1,1,2,1,0,1,1,1,1,1,1,1,1,1,1,0,1,2,1,0,1,1,1,0,1,3,1,0,1,2,1,1,1,2,1,1},
        {1,1,2,1,0,0,1,1,1,0,0,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,1,3,1,0,1,1,1,0,1,2,1,0,1,2,1,1},
        {1,1,2,1,0,0,0,0,0,0,0,1,2,1,0,0,1,1,1,1,1,1,1,1,0,0,1,2,1,0,1,2,1,0,0,0,0,0,1,2,1,0,1,2,1,1},
        {1,1,2,1,0,1,1,1,1,1,0,1,2,1,0,0,1,2,2,2,2,3,2,1,0,0,1,2,1,0,1,2,1,0,0,0,0,0,1,2,1,0,1,2,1,1},
        {1,1,2,1,0,1,2,2,2,1,0,1,2,1,0,0,1,2,1,1,1,1,2,1,0,0,1,2,1,0,1,2,1,0,0,0,0,0,1,2,1,0,1,2,1,1},
        {1,1,2,1,1,1,2,1,2,1,1,1,2,1,1,1,1,2,1,1,1,1,2,1,1,1,1,2,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,2,1,1},
        {1,1,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1},
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
    };

    std::copy(&tempMap[0][0], &tempMap[0][0] + ROWS * COLS, &map[0][0]);
}

// 경계 검사 함수
bool Map::isWithinBounds(int x, int y) const {
    return x >= 0 && x < COLS && y >= 0 && y < ROWS;
}

// 맵 그리기 
void Map::drawMap(int startX = 4, int startY = 3) const {
    gotoxy(startX, startY); // 시작 위치
    for (int i = 0; i < ROWS; ++i) {
        for (int j = 0; j < COLS; ++j) {
            switch (map[i][j]) {
            case 0: // 빈 공간
                std::cout << "  ";
                break;
            case 1: // 벽
                std::cout << "■";
                break;
            case 2: // 점수 아이템
                std::cout << "○";
                break;
            case 3: // 파워 아이템
                std::cout << "●";
                break;
            case 4: // 출입구/포탈
                std::cout << "  ";
                break;
            default: // 알 수 없는 값
                std::cout << "??";
                break;
            }
        }
        std::cout << std::endl;
        std::cout << "    "; // 줄 간격 맞추기
    }
}


bool Map::isWall(int x, int y) const {
    return !isWithinBounds(x, y) || map[y][x] == 1;
}

void Map::setTile(int x, int y, int value) {
    if (isWithinBounds(x, y)) {
        map[y][x] = value;
    }
}

int Map::getTile(int x, int y) const {
    return isWithinBounds(x, y) ? map[y][x] : -1;
}
